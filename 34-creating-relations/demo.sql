DROP TABLE IF EXISTS suppliers, items, orders;

CREATE TABLE suppliers (
	id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	supplier_name TEXT NOT NULL,
	phone TEXT,
	address TEXT
);

CREATE TABLE items (
	id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	item_name TEXT,
	unit TEXT,
	unit_cost NUMERIC,
	-- set up a reference: each item references one supplier that supplies that item
	supplier_id INTEGER REFERENCES suppliers(id) NOT NULL
);

CREATE TABLE orders (
	id INTEGER PRIMARY KEY GENERATED BY DEFAULT AS IDENTITY,
	item_id INTEGER REFERENCES items(id) NOT NULL,
	amount NUMERIC,
	total_cost NUMERIC,
	shipping_status TEXT
);

-- first remove any data that may be present
TRUNCATE  suppliers, items, orders RESTART IDENTITY CASCADE;

-- insert some suppliers
INSERT INTO suppliers
  (supplier_name, phone, address)
  VALUES 
    ('Arnold Grummers Papermaking', '920-840-6056', 'Appleton'),
    ('Glatfelter', '49 (0) 3 39 86 / 69-0', 'Falkenhagen'),
    ('Blumfeld Paper', '555-6789', 'Moscow');

-- insert some items
INSERT INTO items
  (item_name, unit, unit_cost, supplier_id)
  VALUES
    ('Paper Additives', 'LBS', '3.85', 1),
    ('G-Colors Envelope Papers', 'LBS', '0.62', 2),    
    ('Abaca Sheet Pulp', 'LBS', '11.20', 1),    
    ('Unbleached Abaca', 'LBS', '1499.00', 1),    
    ('Wood pulp', 'LBS', '0.20', 3),
    ('White Envelope Papers', 'LBS', '0.52', 2);

-- insert some orders
INSERT INTO orders 
  (item_id, amount, total_cost, shipping_status)
  VALUES
    (1, 10, 38.5, 'Delivered'),
    (2, 2000, 1240, 'Shipped'),
    (3, 50, 560, 'Shipped'),
    (4, 1, 1499, 'Shipped'),
    (5, 2000, 400, 'Preparing'),
    (2, 1000, 620, 'Preparing');    
    
INSERT INTO orders
  (item_id, amount, total_cost, shipping_status)
VALUES
  (6, 20, 20, 'Shipped');
  
 -- can't delete an item if it's referenced by the order table
-- would have to update the order to point to a different item,
 -- or delete the order entirely, before we can delete the item
 DELETE FROM items WHERE id = 6;
 
SELECT * FROM suppliers;
SELECT * FROM items;

SELECT * FROM items 
	JOIN suppliers ON items.supplier_id = suppliers.id;
	
SELECT item_name, supplier_name FROM items 
	JOIN suppliers ON items.supplier_id = suppliers.id
	WHERE unit_cost < 1;

SELECT items.item_name, orders.amount AS quantity
FROM orders
JOIN items ON items.id = orders.item_id
WHERE total_cost < 600;

SELECT address FROM suppliers
	JOIN items ON suppliers.id = items.supplier_id
	JOIN orders ON items.id = orders.item_id
	WHERE shipping_status != 'Shipped';

	-- other joins

DELETE FROM orders WHERE item_id = 5;

ALTER TABLE orders ALTER COLUMN item_id DROP NOT NULL;

INSERT INTO orders (amount, total_cost, shipping_status) VALUES (0, 0, 'Pending');

SELECT * FROM items JOIN orders ON items.id = orders.item_id;

SELECT * FROM items LEFT JOIN orders ON items.id = orders.item_id;
-- LEFT JOIN suppliers_items ON suppliers_items.item_id = items.id;

SELECT * FROM items RIGHT JOIN orders ON items.id = orders.item_id WHERE shipping_status != 'Delivered';

SELECT * FROM items a FULL JOIN orders ON a.id = orders.item_id;

